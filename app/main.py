from fpdf import FPDF
from datetime import datetime
from PyPDF2 import PdfMerger
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.pdfgen import canvas
from reportlab.platypus import Paragraph, Frame
from reportlab.lib.utils import ImageReader


import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from matplotlib.backends.backend_pdf import PdfPages
import os

def get_ycoordinate(plot_path):

    page_width, page_height = A4
    image = ImageReader(plot_path)
    # Get the width and height of the image
    img_width, img_height = image.getSize()
    # Ensure the image fits within the page width
    if img_width > page_width - 200:  # Subtract margins
        scale_factor = (page_width - 200) / img_width
        img_width = img_width * scale_factor
        img_height = img_height * scale_factor

    # Set initial y-coordinate for the first image
    y_coordinate = page_height - img_height - 140  # Leave some space from the top

    next_y_coordinate = y_coordinate - img_height - 20 

    return next_y_coordinate

# 1. Generate Cover Page
def create_cover_page(user, input_labels, min_age, max_age, threshold, project_label,output_dir):

    labels = input_labels.keys()

    filename = 'cover_page'
    cover = f"{output_dir}{filename}.pdf"

    # Ensure the directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Create a new PDF canvas
    pdf = canvas.Canvas(os.path.join(output_dir, f"{filename}.pdf"), pagesize=A4)

    # Title
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawCentredString(10.5 * cm, 27 * cm, "UNITY Data Summary Report")

    # Sub-title : Recon-all output
    pdf.setFont("Helvetica", 14)
    pdf.drawCentredString(10.5 * cm, 25.5 * cm, input_labels['recon-all'])

    # Sub-title
    pdf.setFont("Helvetica", size=14)    

    # Styles
    styles = getSampleStyleSheet()
    styleN = styles['Normal']
    styleN.fontSize = 12  # override fontsize because default stylesheet is too small
    styleN.leading = 15
    # Add left and right indentation
    styleN.leftIndent = 20  # Set left indentation
    styleN.rightIndent = 20  # Set right indentation

    # Create a custom style
    custom_style = ParagraphStyle(name="CustomStyle", parent=styleN,
                              fontSize=12,
                              leading=15,
                              alignment=0,  # Centered
                              leftIndent=20,
                              rightIndent=20,
                              spaceBefore=10,
                              spaceAfter=10)


    # Main text (equivalent to `multi_cell` in FPDF)
    text = ("This report provides a detailed summary of the input derived data provided. "
            "The data is analyzed based on sex and includes the calculation of brain volume z-scores for different age groups. "
            f"List of outliers has been generated based on z-scores outside of ±{threshold} SD. "
            "Custom options such as age filtering and polynomial fitting have been applied to the data.")

    # Create a paragraph for text wrapping
    main_paragraph = Paragraph(text, custom_style)

    # Create a frame to define where the text will go on the page
    frame = Frame(2 * cm, 17 * cm, 17 * cm, 8 * cm, showBoundary=0)  # Adjust size and position

    # Add paragraph to frame
    frame.addFromList([main_paragraph], pdf)

    
    # Custom Options Text
    custom_options_text = (f"Custom Options Used:<br />"
                        f"1. Age Range: {min_age}-{max_age} months<br />"
                        f"2. Outlier Threshold: ±{threshold} SD<br />"
                        "3. Polynomial Fit: Degree 3 (Cubic)<br />"
                        "4. Confidence Interval: 95%")
    
    print(custom_options_text)

    # Create a paragraph for custom options with line breaks
    custom_paragraph = Paragraph(custom_options_text, custom_style)

    # Create another frame for custom options (below user details)
    custom_frame = Frame(2 * cm, 10 * cm, 17 * cm, 8 * cm, showBoundary=0)

    # Add custom options paragraph to the new frame
    custom_frame.addFromList([custom_paragraph], pdf)

    # Timestamp and User Details
    pdf.setFont("Helvetica", 12)
    pdf.drawString(2 * cm, 2 * cm, "Generated By:")
    pdf.drawString(2 * cm, 1.5 * cm, f"{user}")
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    pdf.drawString(2 * cm, 1 * cm, f"{timestamp}")

    pdf.save()
    print("Cover page has been generated.")

    return cover


# 2. Parse the recon-all CSV File
def parse_csv(filepath, project_label, age_min, age_max, threshold):

    """Parse the input CSV file.

    Returns:
        filtered_df (pd.DataFrame): Filtered DataFrame based on age range.
        n (int): Number of observations in the filtered data.
        n_projects (int): Number of unique projects in the filtered data.
        project_labels (list): Unique project labels in the filtered data.
        n_sessions (int): Number of unique sessions in the original data.
        n_clean_sessions (int): Number of unique sessions in the clean data after removing outliers.
        outlier_n (int): Number of participants flagged as outliers based on
    """
        
    # Example DataFrame with ages in months
    #  df = pd.read_csv('/Users/nbourke/GD/atom/unity/fw-gears/fw-untitled/UNITY-Derivatives-volumes.csv')
    df = pd.read_csv(filepath)
    n_sessions = df['session'].nunique()  # Number of unique sessions
    print("Number of unique sessions: ", n_sessions)
    print()

    # Define the bins and labels
    # These have been setup with finer granularity early on due to rapid growth and then coarser granularity later
    bins = [0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 18, 21, 24, 30, 36, 48, 60, 72, 84, 96, 108, 120, 144, 168, 192, 216, 252, 300]
    labels = ['0-1 month', '1-2 months', '2-3 months', '3-4 months', '4-5 months', '5-6 months',
            '6-8 months', '8-10 months', '10-12 months', '12-15 months', '15-18 months', 
            '18-21 months', '21-24 months', '24-30 months', '30-36 months','3-4 years', 
            '4-5 years', '5-6 years', '6-7 years', '7-8 years', '8-9 years', '9-10 years', 
            '10-12 years', '12-14 years', '14-16 years', '16-18 years', '18-21 years', '21-25 years']


    # Bin the ages
    # Rename the 'age' column to 'age_in_days'
    df.rename(columns={'age': 'age_in_days'}, inplace=True)
    df['age_in_months'] = df['age_in_days'] / 30.44
    df['age_group'] = pd.cut(df['age_in_months'], bins=bins, labels=labels, right=False)

    # Group by sex and age group
    grouped = df.groupby(['sex', 'age_group'])

    # Calculate mean and std for each group
    df['mean_total_intracranial'] = grouped['total intracranial'].transform('mean')
    df['std_total_intracranial'] = grouped['total intracranial'].transform('std')

    # Calculate z-scores
    df['z_score'] = (df['total intracranial'] - df['mean_total_intracranial']) / df['std_total_intracranial']

    # Check if 'project_label' exists, if not, assign a default value
    if 'project_label' not in df.columns:
        df['project_label'] = project_label  # Or any default value like None
        # Define the list of columns you want to retain
    columns_to_keep = ['project_label', 'subject',	'session',	'age_in_months', 'sex',	'acquisition',	'total intracranial', 'z_score']
        
    # Filter the DataFrame for subjects with z-scores outside of ±1.5 SD and retain only the specified columns
    outliers_df = df[(df['z_score'] < - threshold) | (df['z_score'] > threshold)][columns_to_keep]
    # Save the filtered DataFrame to a CSV file
    outliers_df.to_csv('/flywheel/v0/output/outliers_list.csv', index=False)
    outlier_n = len(outliers_df)

    # Step 3: Create a clean DataFrame by excluding the outliers
    clean_df = df[~df.index.isin(outliers_df.index)]

    n_clean_sessions = clean_df['session'].nunique()  # Number of unique sessions in the clean data

    # Optional: Save the clean DataFrame to a CSV file
    clean_df.to_csv('/flywheel/v0/work/clean_data.csv', index=False)


    # Set limit for the age range to be included in the analysis
    upper_age_limit = age_max
    lower_age_limit = age_min  

    # Filter the data to include only observations up to 30 months
    filtered_df = clean_df[(clean_df['age_in_months'] <= upper_age_limit) & (clean_df['age_in_months'] >= lower_age_limit)]

    n = len(filtered_df)  # Number of observations in the filtered data
    n_projects = filtered_df['project_label'].nunique()  # Number of unique projects in the filtered data
    project_labels = filtered_df['project_label'].unique()  # Unique project labels in the filtered data

    # --- Generate a summary report with plots and tables --- #

    # Calculate the count (n) for each age group
    age_group_counts = clean_df['age_group'].value_counts().sort_index()
    # Filter out age groups with a count of 0
    age_group_counts = age_group_counts[age_group_counts > 0]

    # Create a new label for each age group that includes the count
    age_group_labels = [f"{label}\n(n={age_group_counts[label]})" for label in age_group_counts.index]

    # Group by sex and age group and calculate the necessary statistics
    summary_table = clean_df.groupby(['age_group', 'sex']).agg({
        'subject': 'nunique',  # Count the number of unique participants
        'session': 'nunique',  # Count the number of unique sessions
        'total intracranial': ['mean', 'std']  # Mean and std of brain volume
    }).reset_index()

    # Remove rows where the mean of 'total intracranial' is NaN
    summary_table = summary_table.dropna(subset=[('total intracranial', 'mean')])

    # Pivot the table to have Sex as columns and Age Group as a single row index
    summary_table = summary_table.pivot(index='age_group', columns='sex')


    # Flatten the multi-level columns
    summary_table.columns = ['_'.join(col).strip() for col in summary_table.columns.values]

    # Reset index to make 'age_group' a column
    summary_table.reset_index(inplace=True)

    # Renaming columns for better readability
    summary_table.columns = [
        'Age Group', 
        'n sub (M)', 'n sub (F)', 
        'n ses (M)', 'n ses (F)',  
        'Mean TICV (M)', 'Mean TICV (F)', 
        'Std TICV (M)', 'Std TICV (F)'
    ]

    # Round the numerical columns to 2 decimal places
    summary_table = summary_table.round(2)
    return df, summary_table, filtered_df, n, n_projects, n_sessions, n_clean_sessions, outlier_n, project_labels, labels


# 3. Generate the Data Report
def create_data_report(df, summary_table, filtered_df, n, n_projects, n_sessions, n_clean_sessions, outlier_n, project_labels, labels, age_min, age_max, threshold,output_dir):

    """Generate a data report with multiple plots and a summary table in a PDF format.

    Returns: report filename
        
    """

    filename = "data_report"
    plot_dir = "/flywheel/v0/work"
    report = f'{output_dir}{filename}.pdf'
    pdf = canvas.Canvas((f'{output_dir}{filename}.pdf') )
    a4_fig_size = (8.27, 11.69)  # A4 size
    # Define the page size
    page_width, page_height = A4
    
    # --- Plot 1: Boxplot of all Z-Scores by Age Group with Sample Sizes --- #

    # Drop observations where 'age_group' is NaN
    df = df.dropna(subset=['age_group'])

    used_age_groups = [age for age in labels if age in df['age_group'].unique()]

    # Ensure that 'age_group' is treated as a categorical variable with the correct order (only for used categories)
    df['age_group'] = pd.Categorical(df['age_group'], categories=used_age_groups, ordered=True)

    # Calculate the count of participants per age group
    age_group_counts = df['age_group'].value_counts().sort_index()

    # Create new labels with counts
    age_group_labels = [f"{label}\n(n={age_group_counts[label]})" for label in used_age_groups]


    # Dynamically adjust font size based on the number of labels
    n_labels = len(used_age_groups)
    font_size = max(6, 8 - n_labels // 3)  # Scale the font size down as the number of labels increases. [Not used]

    # Create figure with full A4 size using plt.figure() (not plt.subplots)
    fig = plt.figure(figsize=(10,12))

    # Define the position and size of the smaller figure within the A4 page
    # The numbers in add_axes([left, bottom, width, height]) are relative to the figure size, between 0 and 1
    ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Left, bottom, width, height (adjust these as needed)

    # Set the plot size and create the boxplot
    # fig, ax = plt.subplots(figsize=a4_fig_size)
    sns.boxplot(x='age_group', y='z_score', data=df, ax=ax, order=used_age_groups)
    ax.set_title('Z-Scores by Age Group')
    ax.set_xlabel('Age Group')
    ax.set_ylabel('Z-Score')

    # Adjust layout so that the plot takes only half of the A4 page (using height ratios)
    #plt.subplots_adjust(top=0.9, bottom=0.6)  # Adjust 'bottom' to fit the lower half, 'top' to adjust upper limit
    
    # Set x-axis tick labels to show the age group labels in the correct order
    ax.set_xticklabels(age_group_labels, rotation=45)
    plt.setp(ax.get_xticklabels(), rotation=45, fontsize=10)  # Shift labels slightly to the left
    ax.grid(True)

    # Add explanation text below the plot
    plt.figtext(0.13, 0.28, 
                "This boxplot displays the distribution of z-scores by age group.\n"
                "Each box represents the interquartile range, with whiskers extending\n"
                f"to show the range within {threshold} times the IQR.\n"
                ""
                f"Total number of unique sessions = {n_sessions}\n"
                f"Number of sessions after removing outliers = {n_clean_sessions}\n"
                f"{outlier_n} participants fell outside the {threshold} IQR range and are flagged for further review.",
                wrap=True, horizontalalignment='left', fontsize=12,
                bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10})  # Added padding for better spacing)

    # Adjust layout to ensure no overlap
    plt.subplots_adjust(top=0.85, bottom=0.4)  # Adjust to fit title and text properly
    # Save the plot only
    plot_path = os.path.join(plot_dir, "zscores_agegroup_plot.png")
    #plt.tight_layout()
    plt.savefig(plot_path)

    pdf.drawImage(plot_path, 70, -50, width= 500, preserveAspectRatio=True)   # Position plot higher on the page

    plt.close()

    
    # Calculate y-coordinate for the next image (descriptive stats)  
    next_y_coordinate = get_ycoordinate(plot_path)
    # --- Plot 2: Summary Table of all Participants --- #   
    
    # Create figure with full A4 size using plt.figure() (not plt.subplots)
    fig = plt.figure(figsize=a4_fig_size)
    ax = fig.add_axes([0.13, 0.5, 0.75, 0.4])  # Left, bottom, width, height (adjust these as needed)
   
    ax.axis('tight')
    ax.axis('off')
    plt.text(0.5, 0.85, 'Summary Descriptive Statistics', fontsize=14, ha='center', transform=fig.transFigure)

    # Increase font size for the table
    table = ax.table(cellText=summary_table.values, colLabels=summary_table.columns, cellLoc='center', loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(8)  # Adjust font size as needed
    table.scale(1.2, 1.2)  # Scale the table   
    
    # Add explanation text below the table
    plt.figtext(0.13, 0.5,
                "This table summarizes the descriptive statistics for the participants,\n"
                "including the number of participants and sessions by sex and age group.",
                wrap=True, horizontalalignment='left', fontsize=12,
                bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10})  # Added padding for better spacing)

    # Adjust layout to ensure no overlap
    plt.subplots_adjust(top=0.85, bottom=0.2)  # Adjust to fit title and text properly
    plot_path = os.path.join(plot_dir, "descriptive_stats.png")
    #plt.tight_layout()
    plt.savefig(plot_path)

    image = ImageReader(plot_path)
    # Get the width and height of the image
    img_width, img_height = image.getSize()

    #pdf.savefig()  # Save the table to the PDF
    plt.close()

    next_y_coordinate = get_ycoordinate(plot_path)

    pdf.drawImage(plot_path, 75, next_y_coordinate-90, width= 500, preserveAspectRatio=True)   # Position plot higher on the page
    pdf.showPage()

    # --- Plot 3: Histogram of Z-Scores --- #
    
    # Create figure with full A4 size using plt.figure() (not plt.subplots)
    fig = plt.figure(figsize=a4_fig_size)

    # Define the position and size of the smaller figure within the A4 page
    # The numbers in add_axes([left, bottom, width, height]) are relative to the figure size, between 0 and 1
    ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Left, bottom, width, height (adjust these as needed)

    # fig, ax = plt.subplots(figsize=a4_fig_size)
    sns.histplot(filtered_df['age_in_months'], bins=20, kde=True, ax=ax)
    ax.set_title('Distribution of Age in Months')
    ax.set_xlabel('Age')
    ax.set_ylabel('Frequency')
    ax.grid(True)
    
    # Add explanation text below the plot
    plt.figtext(0.15, 0.35, "This plot shows the distribution of participant ages in months.\n"
                        "The KDE curve provides a smoothed estimate of the age distribution.\n"
                        f"Plot limits set to {age_min}-{age_max} months, n = {n}.\n "
                            f"Included projects = {', '.join(project_labels)}",
                wrap=True, horizontalalignment='left', fontsize=12,
                bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 12})  # Added padding for better spacing)

    # Adjust layout to ensure no overlap
    plt.subplots_adjust(top=0.85, bottom=0.2)  # Adjust to fit title and text properly
    plot_path = os.path.join(plot_dir, "agedist_plot.png")
    

    #plt.tight_layout()
    plt.savefig(plot_path)
    #pdf.savefig()  # Save plot and text to the PDF
    plt.close()

    pdf.drawImage(plot_path, 75, -50, width= 400, preserveAspectRatio=True)   # Position plot higher on the page

    plt.close()

    # Calculate y-coordinate for the next image (scatterplot)
    next_y_coordinate = get_ycoordinate(plot_path)


    # --- Plot 4: Polynomial fit with degree 3 (cubic) using sns.regplot --- #
    # Create figure with full A4 size using plt.figure() (not plt.subplots)
    fig = plt.figure(figsize=a4_fig_size)
    ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Left, bottom, width, height (adjust these as needed)

    # fig, ax = plt.subplots(figsize=a4_fig_size)
    sns.scatterplot(x='age_in_months', y='total intracranial', hue='sex', data=filtered_df, ax=ax)
    for sex in filtered_df['sex'].unique():
        sns.regplot(
            x='age_in_months', 
            y='total intracranial', 
            data=filtered_df[filtered_df['sex'] == sex], 
            order=3,  # Polynomial degree (3 for cubic)
            scatter=False, 
            ci=95,  # Confidence interval
            ax=ax
        )
    ax.set_title('Brain Volume vs. Age, Split by Sex (Polynomial Fit with CI)')
    ax.set_xlabel('Age (months)')
    ax.set_ylabel('Brain Volume')
    ax.grid(True)
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles=handles[:2], labels=labels[:2], title='Sex')

    # Add explanation text below the plot
    plt.figtext(0.13, 0.3,  f"This scatter plot shows the relationship between age and total intracranial volume, \n"
                            f"with a cubic polynomial fit. The trend is separated by sex, and confidence intervals \n"
                            f"are included for each fit.\nData points outside the initial study {threshold} IQR range are excluded from the plot.\n"
                            "\n"
                            f"Plot limits set to {age_min}-{age_max} months, \n"
                            f"n = {n}\n"
                            f"Included projects = {', '.join(project_labels)}",
                wrap=True, horizontalalignment='left', fontsize=12,
                bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 15})  # Added padding for better spacing

    # Adjust layout to ensure no overlap
    plt.subplots_adjust(top=0.85, bottom=0.2)  # Adjust to fit title and text properly

    plot_path = os.path.join(plot_dir, "ageVol_scatter_plot.png")
    plt.savefig(plot_path)
    #pdf.savefig()  # Save plot and text to the PDF
    plt.close()

    pdf.drawImage(plot_path, 75, next_y_coordinate, width= 400, preserveAspectRatio=True)   # Position plot higher on the page    
    pdf.save()  # Save the PDF

    print("PDF summary report has been generated.")
    return report

# 4. Generate the QC report
def generate_qc_report (input_dir, input_labels,output_dir,project_labels) :

    """Generate the QC report section in a PDF format.

    Returns: report filename
        
    """
    plot_dir = "/flywheel/v0/work"
    filename = "qc_report"
    report = f'{output_dir}{filename}.pdf'
    pdf = canvas.Canvas((f'{output_dir}{filename}.pdf') )
    a4_fig_size = (8.27, 11.69)  # A4 size
    # Define the page size
    page_width, page_height = A4

    if input_labels['qc'] != "":
        df = pd.read_csv(os.path.join(input_dir,input_labels['qc']))
        #Columns of interest
        cols = ["quality_AXI", "quality_COR","quality_SAG","QC_all"]

        # Define the color palette depending on the attribute
        color_palette = {
            'good': '#6D9C77',  # Cool-toned green
            'passed': '#6D9C77',  # Cool-toned green

            'failed': '#D96B6B',  # Muted, elegant red
            'bad': '#D96B6B',  # Muted, elegant red

            'unsure': '#E7C069',  # Soft, subtle yellow
            'incomplete': '#6A89CC'  # Muted blue
        }


        # Pie chart for each acquisition type
        for col in cols:
            counts = df[col].value_counts()  # Count 'pass', 'fail', 'unclear' in each column
            # Extract colors based on labels present in the column
            
            colors = [color_palette[label] for label in counts.index if label in color_palette]
            plt.figure(figsize=(8, 8))
            plt.pie(counts, labels=counts.index, autopct='%1.1f%%', startangle=90,colors=colors,wedgeprops={'edgecolor': 'black', 'linewidth': 1},textprops={'fontsize': 12} )
            plt.title(f'QC Distribution for {col}',fontsize=14)
            plot_path = os.path.join(plot_dir, f"{col}.png")
            # plt.tight_layout()
            plt.savefig(plot_path)
            plt.close()

        # Define subtitle text and positioning
        subtitle_text = "Quality Control Distribution by Acquisition Type"
        subtitle_x = A4[0] / 2  # Centered horizontally
        subtitle_y = 27 * cm  # Position the subtitle near the top in cm

        # Draw the subtitle
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawCentredString(subtitle_x, subtitle_y, subtitle_text)

        # Define image positions for a 2x2 grid using cm units
        positions = [
        (1 * cm, 16 * cm),   # Top-left (lowered)
        (10 * cm, 16 * cm),  # Top-right (lowered)
        (1 * cm, 7 * cm),    # Bottom-left (lowered)
        (10 * cm, 7 * cm)    # Bottom-right (lowered)
    ]

        # Define position for the line chart below the grid
        line_chart_position = (1 * cm, 5 * cm)  # Adjust this y-coordinate as necessary

        # Load and draw each saved pie chart image at the specified positions
        for i, col in enumerate(cols):
            img = ImageReader(os.path.join(plot_dir, f"{col}.png"))
            x, y = positions[i]
            pdf.drawImage(img, x, y, width=10 * cm, height=10 * cm)  # Adjust image size as needed
        
        
        
        ####### Failures over time ########

            # Preprocess the session_date to replace underscores with colons
        df['session_date'] = df['Session Label'].str.replace('_', ':', regex=False)

        # Ensure session_date is a datetime type
        df['session_date'] = pd.to_datetime(df['session_date'], errors='coerce')

        #Check for any parsing issues
        if df['session_date'].isnull().any():
            print("Warning: Some dates could not be parsed.")

        # Extract month and year for monthly grouping
        df['month'] = df['session_date'].dt.to_period('M')

        # Count total entries and failures by month
        total_by_month = df.groupby('month').size()
        failures_by_month = df[df['QC_all'] == 'failed'].groupby('month').size()

        # Calculate percentage of failures
        failure_percentage_monthly = (failures_by_month / total_by_month) * 100

        # Plotting setup
        fig = plt.figure(figsize=a4_fig_size)
        ax = fig.add_axes([0.125, 0.5, 0.8, 0.4])  # Position and size of the plot within the A4 page

        # Use seaborn's lineplot on ax
        sns.lineplot(
            x=failure_percentage_monthly.index.astype(str), 
            y=failure_percentage_monthly.values, 
            marker='o', linestyle='-', color='#D96B6B', ax=ax
        )

        # Set title and labels directly on ax
        ax.set_title('Monthly Percentage of (QC_all) Failures')
        ax.set_xlabel('Year-Month')
        ax.set_ylabel('Percentage of Failures (%)')
        ax.tick_params(axis='x', rotation=45)  # Rotate x-axis labels for readability
        ax.grid(True)

        

        # Add explanation text just below the plot within the figure
        plt.figtext(
            0.17, 0.32,  # Position relative to the figure (0.42 keeps it below ax)
            "This line chart illustrates the monthly failure rate\nfor quality control (QC) across sessions,\n"
            "shown as a percentage of total acquisitions for each month.\n"
            f"\nIncluded projects = {', '.join(project_labels)}",
            wrap=True, horizontalalignment='left', fontsize=12,
            bbox={'facecolor': 'lightgray', 'alpha': 0.5, 'pad': 10}
        )
        
        plt.tight_layout()  # Adjust layout to make room for rotated labels   
        plot_path = os.path.join(plot_dir,"failure_percentage_over_time.png")
        plt.savefig(plot_path)  # Save the plot as an image
        
        pdf.showPage() #new page        

        # Position line chart image below the grid of pie charts
        pdf.drawImage(plot_path,  70, -20, width= 400, preserveAspectRatio=True)

    
    else:
        # Define subtitle text and positioning
        subtitle_text = "No QC input was provided."
        subtitle_x = A4[0] / 2  # Centered horizontally
        subtitle_y = 27 * cm  # Position the subtitle near the top in cm

        # Draw the subtitle
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawCentredString(subtitle_x, subtitle_y, subtitle_text)

    pdf.save()

    return report

# 5. Merge the Cover Page and Data Report
def merge_pdfs(cover, report, qc, final_report):
    merger = PdfMerger()

    print("Merging the cover page and data report...")
    print("Cover Page: ", cover)
    print("Data Report: ", report)
    print("QC Report: ", qc)
    print("Final Report: ", final_report)

    # Append the cover page
    merger.append(cover)

    # Append the data report
    merger.append(report)

    # Append the qc report
    merger.append(qc)

    # Write to a final PDF
    merger.write(final_report)
    merger.close()